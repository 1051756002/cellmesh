// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: clientmsg_gen.proto

/*
	Package proto is a generated protocol buffer package.

	It is generated from these files:
		clientmsg_gen.proto

	It has these top-level messages:
		ServerInfo
		PingACK
		LoginREQ
		LoginACK
		VerifyREQ
		VerifyACK
		ChatREQ
		ChatACK
*/
package proto

import proto1 "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ResultCode int32

const (
	ResultCode_NoError      ResultCode = 0
	ResultCode_GameNotReady ResultCode = 101
)

var ResultCode_name = map[int32]string{
	0:   "NoError",
	101: "GameNotReady",
}
var ResultCode_value = map[string]int32{
	"NoError":      0,
	"GameNotReady": 101,
}

func (x ResultCode) String() string {
	return proto1.EnumName(ResultCode_name, int32(x))
}
func (ResultCode) EnumDescriptor() ([]byte, []int) { return fileDescriptorClientmsgGen, []int{0} }

type ServerInfo struct {
	IP   string `protobuf:"bytes,1,opt,name=IP,proto3" json:"IP,omitempty"`
	Port int32  `protobuf:"varint,2,opt,name=Port,proto3" json:"Port,omitempty"`
}

func (m *ServerInfo) Reset()                    { *m = ServerInfo{} }
func (m *ServerInfo) String() string            { return proto1.CompactTextString(m) }
func (*ServerInfo) ProtoMessage()               {}
func (*ServerInfo) Descriptor() ([]byte, []int) { return fileDescriptorClientmsgGen, []int{0} }

func (m *ServerInfo) GetIP() string {
	if m != nil {
		return m.IP
	}
	return ""
}

func (m *ServerInfo) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type PingACK struct {
}

func (m *PingACK) Reset()                    { *m = PingACK{} }
func (m *PingACK) String() string            { return proto1.CompactTextString(m) }
func (*PingACK) ProtoMessage()               {}
func (*PingACK) Descriptor() ([]byte, []int) { return fileDescriptorClientmsgGen, []int{1} }

type LoginREQ struct {
	Version  string `protobuf:"bytes,1,opt,name=Version,proto3" json:"Version,omitempty"`
	Platform string `protobuf:"bytes,2,opt,name=Platform,proto3" json:"Platform,omitempty"`
	UID      string `protobuf:"bytes,3,opt,name=UID,proto3" json:"UID,omitempty"`
}

func (m *LoginREQ) Reset()                    { *m = LoginREQ{} }
func (m *LoginREQ) String() string            { return proto1.CompactTextString(m) }
func (*LoginREQ) ProtoMessage()               {}
func (*LoginREQ) Descriptor() ([]byte, []int) { return fileDescriptorClientmsgGen, []int{2} }

func (m *LoginREQ) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *LoginREQ) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *LoginREQ) GetUID() string {
	if m != nil {
		return m.UID
	}
	return ""
}

type LoginACK struct {
	Result    ResultCode  `protobuf:"varint,1,opt,name=Result,proto3,enum=proto.ResultCode" json:"Result,omitempty"`
	Server    *ServerInfo `protobuf:"bytes,2,opt,name=Server" json:"Server,omitempty"`
	GameToken string      `protobuf:"bytes,3,opt,name=GameToken,proto3" json:"GameToken,omitempty"`
}

func (m *LoginACK) Reset()                    { *m = LoginACK{} }
func (m *LoginACK) String() string            { return proto1.CompactTextString(m) }
func (*LoginACK) ProtoMessage()               {}
func (*LoginACK) Descriptor() ([]byte, []int) { return fileDescriptorClientmsgGen, []int{3} }

func (m *LoginACK) GetResult() ResultCode {
	if m != nil {
		return m.Result
	}
	return ResultCode_NoError
}

func (m *LoginACK) GetServer() *ServerInfo {
	if m != nil {
		return m.Server
	}
	return nil
}

func (m *LoginACK) GetGameToken() string {
	if m != nil {
		return m.GameToken
	}
	return ""
}

type VerifyREQ struct {
	GameToken string `protobuf:"bytes,1,opt,name=GameToken,proto3" json:"GameToken,omitempty"`
}

func (m *VerifyREQ) Reset()                    { *m = VerifyREQ{} }
func (m *VerifyREQ) String() string            { return proto1.CompactTextString(m) }
func (*VerifyREQ) ProtoMessage()               {}
func (*VerifyREQ) Descriptor() ([]byte, []int) { return fileDescriptorClientmsgGen, []int{4} }

func (m *VerifyREQ) GetGameToken() string {
	if m != nil {
		return m.GameToken
	}
	return ""
}

type VerifyACK struct {
	Result ResultCode `protobuf:"varint,1,opt,name=Result,proto3,enum=proto.ResultCode" json:"Result,omitempty"`
}

func (m *VerifyACK) Reset()                    { *m = VerifyACK{} }
func (m *VerifyACK) String() string            { return proto1.CompactTextString(m) }
func (*VerifyACK) ProtoMessage()               {}
func (*VerifyACK) Descriptor() ([]byte, []int) { return fileDescriptorClientmsgGen, []int{5} }

func (m *VerifyACK) GetResult() ResultCode {
	if m != nil {
		return m.Result
	}
	return ResultCode_NoError
}

type ChatREQ struct {
	Content string `protobuf:"bytes,1,opt,name=Content,proto3" json:"Content,omitempty"`
}

func (m *ChatREQ) Reset()                    { *m = ChatREQ{} }
func (m *ChatREQ) String() string            { return proto1.CompactTextString(m) }
func (*ChatREQ) ProtoMessage()               {}
func (*ChatREQ) Descriptor() ([]byte, []int) { return fileDescriptorClientmsgGen, []int{6} }

func (m *ChatREQ) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type ChatACK struct {
	Content string `protobuf:"bytes,1,opt,name=Content,proto3" json:"Content,omitempty"`
}

func (m *ChatACK) Reset()                    { *m = ChatACK{} }
func (m *ChatACK) String() string            { return proto1.CompactTextString(m) }
func (*ChatACK) ProtoMessage()               {}
func (*ChatACK) Descriptor() ([]byte, []int) { return fileDescriptorClientmsgGen, []int{7} }

func (m *ChatACK) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func init() {
	proto1.RegisterType((*ServerInfo)(nil), "proto.ServerInfo")
	proto1.RegisterType((*PingACK)(nil), "proto.PingACK")
	proto1.RegisterType((*LoginREQ)(nil), "proto.LoginREQ")
	proto1.RegisterType((*LoginACK)(nil), "proto.LoginACK")
	proto1.RegisterType((*VerifyREQ)(nil), "proto.VerifyREQ")
	proto1.RegisterType((*VerifyACK)(nil), "proto.VerifyACK")
	proto1.RegisterType((*ChatREQ)(nil), "proto.ChatREQ")
	proto1.RegisterType((*ChatACK)(nil), "proto.ChatACK")
	proto1.RegisterEnum("proto.ResultCode", ResultCode_name, ResultCode_value)
}
func (m *ServerInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServerInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.IP) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintClientmsgGen(dAtA, i, uint64(len(m.IP)))
		i += copy(dAtA[i:], m.IP)
	}
	if m.Port != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintClientmsgGen(dAtA, i, uint64(m.Port))
	}
	return i, nil
}

func (m *PingACK) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PingACK) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *LoginREQ) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginREQ) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Version) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintClientmsgGen(dAtA, i, uint64(len(m.Version)))
		i += copy(dAtA[i:], m.Version)
	}
	if len(m.Platform) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintClientmsgGen(dAtA, i, uint64(len(m.Platform)))
		i += copy(dAtA[i:], m.Platform)
	}
	if len(m.UID) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintClientmsgGen(dAtA, i, uint64(len(m.UID)))
		i += copy(dAtA[i:], m.UID)
	}
	return i, nil
}

func (m *LoginACK) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginACK) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintClientmsgGen(dAtA, i, uint64(m.Result))
	}
	if m.Server != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintClientmsgGen(dAtA, i, uint64(m.Server.Size()))
		n1, err := m.Server.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.GameToken) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintClientmsgGen(dAtA, i, uint64(len(m.GameToken)))
		i += copy(dAtA[i:], m.GameToken)
	}
	return i, nil
}

func (m *VerifyREQ) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerifyREQ) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.GameToken) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintClientmsgGen(dAtA, i, uint64(len(m.GameToken)))
		i += copy(dAtA[i:], m.GameToken)
	}
	return i, nil
}

func (m *VerifyACK) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerifyACK) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintClientmsgGen(dAtA, i, uint64(m.Result))
	}
	return i, nil
}

func (m *ChatREQ) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatREQ) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Content) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintClientmsgGen(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	return i, nil
}

func (m *ChatACK) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatACK) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Content) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintClientmsgGen(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	return i, nil
}

func encodeVarintClientmsgGen(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ServerInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.IP)
	if l > 0 {
		n += 1 + l + sovClientmsgGen(uint64(l))
	}
	if m.Port != 0 {
		n += 1 + sovClientmsgGen(uint64(m.Port))
	}
	return n
}

func (m *PingACK) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *LoginREQ) Size() (n int) {
	var l int
	_ = l
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovClientmsgGen(uint64(l))
	}
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovClientmsgGen(uint64(l))
	}
	l = len(m.UID)
	if l > 0 {
		n += 1 + l + sovClientmsgGen(uint64(l))
	}
	return n
}

func (m *LoginACK) Size() (n int) {
	var l int
	_ = l
	if m.Result != 0 {
		n += 1 + sovClientmsgGen(uint64(m.Result))
	}
	if m.Server != nil {
		l = m.Server.Size()
		n += 1 + l + sovClientmsgGen(uint64(l))
	}
	l = len(m.GameToken)
	if l > 0 {
		n += 1 + l + sovClientmsgGen(uint64(l))
	}
	return n
}

func (m *VerifyREQ) Size() (n int) {
	var l int
	_ = l
	l = len(m.GameToken)
	if l > 0 {
		n += 1 + l + sovClientmsgGen(uint64(l))
	}
	return n
}

func (m *VerifyACK) Size() (n int) {
	var l int
	_ = l
	if m.Result != 0 {
		n += 1 + sovClientmsgGen(uint64(m.Result))
	}
	return n
}

func (m *ChatREQ) Size() (n int) {
	var l int
	_ = l
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovClientmsgGen(uint64(l))
	}
	return n
}

func (m *ChatACK) Size() (n int) {
	var l int
	_ = l
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovClientmsgGen(uint64(l))
	}
	return n
}

func sovClientmsgGen(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozClientmsgGen(x uint64) (n int) {
	return sovClientmsgGen(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ServerInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClientmsgGen
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServerInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServerInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientmsgGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientmsgGen
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientmsgGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipClientmsgGen(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClientmsgGen
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PingACK) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClientmsgGen
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PingACK: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PingACK: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipClientmsgGen(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClientmsgGen
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoginREQ) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClientmsgGen
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginREQ: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginREQ: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientmsgGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientmsgGen
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientmsgGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientmsgGen
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientmsgGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientmsgGen
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClientmsgGen(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClientmsgGen
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoginACK) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClientmsgGen
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginACK: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginACK: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientmsgGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (ResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Server", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientmsgGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClientmsgGen
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Server == nil {
				m.Server = &ServerInfo{}
			}
			if err := m.Server.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientmsgGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientmsgGen
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClientmsgGen(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClientmsgGen
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerifyREQ) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClientmsgGen
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifyREQ: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifyREQ: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientmsgGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientmsgGen
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClientmsgGen(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClientmsgGen
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerifyACK) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClientmsgGen
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifyACK: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifyACK: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientmsgGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (ResultCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipClientmsgGen(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClientmsgGen
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChatREQ) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClientmsgGen
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChatREQ: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChatREQ: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientmsgGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientmsgGen
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClientmsgGen(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClientmsgGen
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChatACK) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClientmsgGen
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChatACK: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChatACK: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientmsgGen
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientmsgGen
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClientmsgGen(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClientmsgGen
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipClientmsgGen(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowClientmsgGen
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClientmsgGen
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClientmsgGen
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthClientmsgGen
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowClientmsgGen
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipClientmsgGen(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthClientmsgGen = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowClientmsgGen   = fmt.Errorf("proto: integer overflow")
)

func init() { proto1.RegisterFile("clientmsg_gen.proto", fileDescriptorClientmsgGen) }

var fileDescriptorClientmsgGen = []byte{
	// 331 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x90, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x86, 0xbb, 0xad, 0x6d, 0x9a, 0xa9, 0x94, 0xb8, 0x5e, 0x82, 0x48, 0x28, 0xf1, 0xd2, 0x2a,
	0x14, 0x51, 0xf0, 0x5e, 0x63, 0x91, 0x50, 0x29, 0x71, 0xd5, 0x5e, 0x25, 0xda, 0x6d, 0x0c, 0xb6,
	0x3b, 0xb2, 0x5d, 0x85, 0x5e, 0x7c, 0x06, 0x1f, 0xcb, 0xa3, 0x8f, 0x20, 0xf5, 0x45, 0x24, 0xdb,
	0x4d, 0x83, 0x82, 0x07, 0x4f, 0x3b, 0x33, 0x7c, 0xfb, 0xcf, 0xff, 0x0f, 0x6c, 0xdf, 0x4f, 0x53,
	0x2e, 0xd4, 0x6c, 0x9e, 0xdc, 0x26, 0x5c, 0x74, 0x9f, 0x24, 0x2a, 0xa4, 0x55, 0xfd, 0xf8, 0x87,
	0x00, 0x57, 0x5c, 0xbe, 0x70, 0x19, 0x8a, 0x09, 0xd2, 0x26, 0x94, 0xc3, 0xc8, 0x25, 0x2d, 0xd2,
	0xb6, 0x59, 0x39, 0x8c, 0x28, 0x85, 0x8d, 0x08, 0xa5, 0x72, 0xcb, 0x2d, 0xd2, 0xae, 0x32, 0x5d,
	0xfb, 0x36, 0x58, 0x51, 0x2a, 0x92, 0x5e, 0x30, 0xf0, 0x19, 0xd4, 0x2f, 0x30, 0x49, 0x05, 0xeb,
	0x5f, 0x52, 0x17, 0xac, 0x11, 0x97, 0xf3, 0x14, 0x85, 0xf9, 0x9f, 0xb7, 0x74, 0x07, 0xea, 0xd1,
	0x34, 0x56, 0x13, 0x94, 0x33, 0x2d, 0x64, 0xb3, 0x75, 0x4f, 0x1d, 0xa8, 0xdc, 0x84, 0x67, 0x6e,
	0x45, 0x8f, 0xb3, 0xd2, 0x7f, 0x35, 0x9a, 0xbd, 0x60, 0x40, 0x3b, 0x50, 0x63, 0x7c, 0xfe, 0x3c,
	0x55, 0x5a, 0xb2, 0x79, 0xb4, 0xb5, 0xf2, 0xde, 0x5d, 0x0d, 0x03, 0x1c, 0x73, 0x66, 0x80, 0x0c,
	0x5d, 0xe5, 0xd0, 0x2b, 0x1a, 0x6b, 0xb4, 0x08, 0xc7, 0x0c, 0x40, 0x77, 0xc1, 0x3e, 0x8f, 0x67,
	0xfc, 0x1a, 0x1f, 0xb9, 0x30, 0x9b, 0x8b, 0x81, 0xdf, 0x01, 0x7b, 0xc4, 0x65, 0x3a, 0x59, 0x64,
	0xa1, 0x7e, 0xa0, 0xe4, 0x37, 0x7a, 0x92, 0xa3, 0xff, 0xf3, 0xea, 0xef, 0x81, 0x15, 0x3c, 0xc4,
	0xca, 0x5c, 0x2d, 0x40, 0xa1, 0xb8, 0x50, 0xf9, 0xd5, 0x4c, 0x9b, 0x43, 0x99, 0xf4, 0x9f, 0xd0,
	0xfe, 0x01, 0x40, 0xa1, 0x4f, 0x1b, 0x60, 0x0d, 0xb1, 0x2f, 0x25, 0x4a, 0xa7, 0x44, 0x1d, 0xd8,
	0xcc, 0x9c, 0x0e, 0x51, 0x31, 0x1e, 0x8f, 0x17, 0x0e, 0x3f, 0x75, 0xde, 0x97, 0x1e, 0xf9, 0x58,
	0x7a, 0xe4, 0x73, 0xe9, 0x91, 0xb7, 0x2f, 0xaf, 0x74, 0x57, 0xd3, 0x16, 0x8f, 0xbf, 0x03, 0x00,
	0x00, 0xff, 0xff, 0x18, 0x0b, 0x7a, 0x6d, 0x21, 0x02, 0x00, 0x00,
}
