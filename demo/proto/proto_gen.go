// Auto generated by github.com/davyxu/cellmesh/protogen
// DO NOT EDIT!

package proto

import (
	"fmt"
	"reflect"
	"github.com/davyxu/cellnet"
	"github.com/davyxu/cellnet/codec"
	"github.com/davyxu/cellmesh/service"
	_ "github.com/davyxu/cellnet/codec/json"
)

// Make compiler import happy
var (
	_ service.Service
	_ cellnet.Peer
	_ cellnet.Codec
	_ reflect.Type
	_ fmt.Formatter
)

type ResultCode int32

const (
	ResultCode_NoError      ResultCode = 0
	ResultCode_GameNotReady ResultCode = 1
)

var (
	ResultCodeMapperValueByName = map[string]int32{
		"NoError":      0,
		"GameNotReady": 1,
	}

	ResultCodeMapperNameByValue = map[int32]string{
		0: "NoError",
		1: "GameNotReady",
	}

	ResultCodeMapperTrailingCommentByValue = map[int32]string{
		0: "",
		1: "",
	}
)

func (self ResultCode) String() string {
	return ResultCodeMapperNameByValue[int32(self)]
}

type ServerInfo struct {
	IP   string
	Port int32
}

type LoginREQ struct {
	Version  string
	Platform string
	UID      string
}

type LoginACK struct {
	Result    ResultCode
	Server    ServerInfo
	GameToken string
}

type VerifyREQ struct {
	GameToken string
}

type VerifyACK struct {
	Result ResultCode
}

type ChatREQ struct {
	Content string
}

type ChatACK struct {
	Content string
}

type ServiceIdentifyACK struct {
	SvcName string
	SvcID   string
	Host    string
	Port    int32
}

type RouterBindUserREQ struct {
	Token int64
}

type RouterBindUserACK struct {
}

func (self *ServerInfo) String() string         { return fmt.Sprintf("%+v", *self) }
func (self *LoginREQ) String() string           { return fmt.Sprintf("%+v", *self) }
func (self *LoginACK) String() string           { return fmt.Sprintf("%+v", *self) }
func (self *VerifyREQ) String() string          { return fmt.Sprintf("%+v", *self) }
func (self *VerifyACK) String() string          { return fmt.Sprintf("%+v", *self) }
func (self *ChatREQ) String() string            { return fmt.Sprintf("%+v", *self) }
func (self *ChatACK) String() string            { return fmt.Sprintf("%+v", *self) }
func (self *ServiceIdentifyACK) String() string { return fmt.Sprintf("%+v", *self) }
func (self *RouterBindUserREQ) String() string  { return fmt.Sprintf("%+v", *self) }
func (self *RouterBindUserACK) String() string  { return fmt.Sprintf("%+v", *self) }

func GetRPCPair(req interface{}) reflect.Type {

	switch req.(type) {
	case *LoginREQ:
		return reflect.TypeOf((*LoginACK)(nil)).Elem()
	case *VerifyREQ:
		return reflect.TypeOf((*VerifyACK)(nil)).Elem()
	case *ChatREQ:
		return reflect.TypeOf((*ChatACK)(nil)).Elem()
	case *RouterBindUserREQ:
		return reflect.TypeOf((*RouterBindUserACK)(nil)).Elem()
	}

	return nil
}

// demo.login
var (
	Handler_LoginREQ = func(ev service.Event, req *LoginREQ) { panic("'LoginREQ' not handled") }
)

// demo.game
var (
	Handler_VerifyREQ = func(ev service.Event, req *VerifyREQ) { panic("'VerifyREQ' not handled") }
	Handler_ChatREQ   = func(ev service.Event, req *ChatREQ) { panic("'ChatREQ' not handled") }
)

// demo.router
var (
	Handler_RouterBindUserREQ = func(ev service.Event, req *RouterBindUserREQ) { panic("'RouterBindUserREQ' not handled") }
)

func GetDispatcher(svcName string) service.DispatcherFunc {

	switch svcName {
	case "demo.login":
		return func(ev service.Event) {
			switch req := ev.Message().(type) {
			case *LoginREQ:
				Handler_LoginREQ(ev, req)
			}
		}
	case "demo.game":
		return func(ev service.Event) {
			switch req := ev.Message().(type) {
			case *VerifyREQ:
				Handler_VerifyREQ(ev, req)
			case *ChatREQ:
				Handler_ChatREQ(ev, req)
			}
		}
	case "demo.router":
		return func(ev service.Event) {
			switch req := ev.Message().(type) {
			case *RouterBindUserREQ:
				Handler_RouterBindUserREQ(ev, req)
			}
		}
	}

	return nil
}

func init() {

	cellnet.RegisterMessageMeta(&cellnet.MessageMeta{
		Codec: codec.MustGetCodec("json"),
		Type:  reflect.TypeOf((*LoginREQ)(nil)).Elem(),
		ID:    39009,
	}).SetContext("service", "demo.login")

	cellnet.RegisterMessageMeta(&cellnet.MessageMeta{
		Codec: codec.MustGetCodec("json"),
		Type:  reflect.TypeOf((*LoginACK)(nil)).Elem(),
		ID:    840,
	}).SetContext("service", "")

	cellnet.RegisterMessageMeta(&cellnet.MessageMeta{
		Codec: codec.MustGetCodec("binary"),
		Type:  reflect.TypeOf((*VerifyREQ)(nil)).Elem(),
		ID:    23773,
	}).SetContext("service", "demo.game")

	cellnet.RegisterMessageMeta(&cellnet.MessageMeta{
		Codec: codec.MustGetCodec("binary"),
		Type:  reflect.TypeOf((*VerifyACK)(nil)).Elem(),
		ID:    51140,
	}).SetContext("service", "")

	cellnet.RegisterMessageMeta(&cellnet.MessageMeta{
		Codec: codec.MustGetCodec("binary"),
		Type:  reflect.TypeOf((*ChatREQ)(nil)).Elem(),
		ID:    5832,
	}).SetContext("service", "demo.game")

	cellnet.RegisterMessageMeta(&cellnet.MessageMeta{
		Codec: codec.MustGetCodec("binary"),
		Type:  reflect.TypeOf((*ChatACK)(nil)).Elem(),
		ID:    33199,
	}).SetContext("service", "")

	cellnet.RegisterMessageMeta(&cellnet.MessageMeta{
		Codec: codec.MustGetCodec("binary"),
		Type:  reflect.TypeOf((*ServiceIdentifyACK)(nil)).Elem(),
		ID:    49180,
	}).SetContext("service", "")

	cellnet.RegisterMessageMeta(&cellnet.MessageMeta{
		Codec: codec.MustGetCodec("binary"),
		Type:  reflect.TypeOf((*RouterBindUserREQ)(nil)).Elem(),
		ID:    34501,
	}).SetContext("service", "demo.router")

	cellnet.RegisterMessageMeta(&cellnet.MessageMeta{
		Codec: codec.MustGetCodec("binary"),
		Type:  reflect.TypeOf((*RouterBindUserACK)(nil)).Elem(),
		ID:    61868,
	}).SetContext("service", "")

}
